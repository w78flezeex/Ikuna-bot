const { Client, GatewayIntentBits, ActivityType, Collection, ButtonStyle } = require('discord.js');
const { REST } = require('@discordjs/rest');
const { Routes } = require('discord-api-types/v9');
const fs = require('fs');
const mongoose = require('mongoose');
const path = require('path');
const { DisTube } = require('distube');
const { YtDlpPlugin } = require("@distube/yt-dlp");
const { mongoDB, clientIdentificator, token, embedcolor } = require("./config.json")

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB
mongoose.connect(mongoDB, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
}).then(() => {
    console.log('–°–æ–µ–¥–∏–Ω–∏–ª—Å—è —Å MongoDB');
}).catch(err => {
    console.error('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB:', err);
});

// –í–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Ç–æ–≤
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildVoiceStates, // –í–∞–∂–Ω—ã–π –∏–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
        GatewayIntentBits.GuildPresences,
        GatewayIntentBits.GuildMessageTyping,
    ],
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DisTube —Å –ø–ª–∞–≥–∏–Ω–æ–º yt-dlp
client.distube = new DisTube(client, {
    plugins: [
        new YtDlpPlugin({ update: false })
    ],
    emitNewSongOnly: true,
    joinNewVoiceChannel: false,
    nsfw: true,
});

client.distube.on("initQueue", queue => {
    queue.autoplay = false;            // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–ª–µ–π
    queue.leaveOnEmpty = true;         // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥ –∏–∑ –ø—É—Å—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    queue.emptyCooldown = 20;          // 20 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
});

const { GiveawaysManager } = require('vante-giveaways');
const { giveaways } = require("./mongoDB");
class GiveawayManagerWithMongo extends GiveawaysManager {
    // This function is called when the manager needs to get all giveaways which are stored in the database.
    async getAllGiveaways() {
        // Get all giveaways from the database. We fetch all documents by passing an empty condition.
        return await giveaways.find().lean().exec();
    }

    // This function is called when a giveaway needs to be saved in the database.
    async saveGiveaway(messageId, giveawayData) {
        // Add the new giveaway to the database
        await giveaways.create(giveawayData);
        // Don't forget to return something!
        return true;
    }

    // This function is called when a giveaway needs to be edited in the database.
    async editGiveaway(messageId, giveawayData) {
        // Find by messageId and update it
        await giveaways.updateOne({ messageId }, giveawayData).exec();
        // Don't forget to return something!
        return true;
    }

    // This function is called when a giveaway needs to be deleted from the database.
    async deleteGiveaway(messageId) {
        // Find by messageId and delete it
        await giveaways.deleteOne({ messageId }).exec();
        // Don't forget to return something!
        return true;
    }
};

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
const manager = new GiveawayManagerWithMongo(client, {
    // –ù–µ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ 'storage', —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    updateCountdownEvery: 10000, // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    default: {
        botsCanWin: false,
        embedColor: embedcolor,
        embedColorEnd: '#FF0000',
        buttonEmoji: 'üéâ',
        buttonStyle: ButtonStyle.Primary,
        replyToGiveaway: true,
    }
});

client.giveawaysManager = manager;

client.giveawaysManager.on('giveawayJoined', (giveaway, member, interaction) => {
    if (!giveaway.isDrop) return interaction.reply({ content: `:tada: **${member.user.username}**, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å —Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å!`, ephemeral: true })

    interaction.reply({ content: `:tada: **${member.user.username}**, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å —Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫ –¥—Ä–æ–ø–∞!`, ephemeral: true })
});

client.giveawaysManager.on('giveawayLeaved', (giveaway, member, interaction) => {
    return interaction.reply({ content: `**${member.user.username}**, –≤—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à`, ephemeral: true })
});

client.commands = new Map();

const commandFolders = fs.readdirSync('./src/');

for (const folder of commandFolders) {
    const commandFiles = fs.readdirSync(`./src/${folder}`).filter(file => file.endsWith('.js'));

    for (const file of commandFiles) {
        const command = require(`./src/${folder}/${file}`);
        client.commands.set(command.data.name, command);
    }
}

const commands = Array.from(client.commands.values()).map(command => command.data.toJSON());

const handlersDir = path.join(__dirname, 'handlers');

// –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ handlers
fs.readdir(handlersDir, (err, files) => {
    if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ handlers:', err);
        return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã JavaScript
    const jsFiles = files.filter((file) => file.endsWith('.js'));

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª handler
    for (const file of jsFiles) {
        const handler = require(path.join(handlersDir, file));
        if (handler.init) {
            handler.init(client);
            console.log(`Handler ${file} –∑–∞–≥—Ä—É–∂–µ–Ω.`);
        } else {
            console.warn(`Handler ${file} –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ init.`);
        }
    }

    const clientId = clientIdentificator; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∫–ª–∏–µ–Ω—Ç–∞ –±–æ—Ç–∞

    // –°–æ–∑–¥–∞–Ω–∏–µ REST –∫–ª–∏–µ–Ω—Ç–∞
    const rest = new REST({ version: '10' }).setToken(token);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≤–µ–Ω—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ ./events
    client.on('ready', async () => {
        console.log(`–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –±–æ—Ç ${client.user.tag}`);

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        const statuses = [
            { name: '–±–µ—Ç–∞-—Ç–µ—Å—Ç | /help', type: ActivityType.Playing },
            { name: 'c–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è üíñ', type: ActivityType.Watching },
            { name: '—ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ!', type: ActivityType.Watching }
        ];
        let currentStatus = 0;
        setInterval(() => {
            currentStatus = (currentStatus + 1) % statuses.length;
            client.user.setActivity(statuses[currentStatus]);
        }, 30000); // –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç
            const guilds = client.guilds.cache.map(guild => guild.id);

            for (const guildId of guilds) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∫–∞–∂–¥–æ–º —Å–µ—Ä–≤–µ—Ä–µ
                await rest.put(
                    Routes.applicationGuildCommands(clientIdentificator, guildId),
                    { body: commands },
                );
                console.log(`–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Successfall –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª–æ (/) –∫–æ–º–∞–Ω–¥—É–µ—Ç –µ–º—É ${guildId}.`);
            }
        } catch (error) {
            console.error(error);
        }
    });

    client.on('guildCreate', async guild => {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            await rest.put(
                Routes.applicationGuildCommands(clientId, guild.id),
                { body: commands },
            );

            console.log(`–Ø —Å–æ–∑–¥–∞–ª–∞ slash –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${guild.id}.`);
            console.log(`–û—Ç–ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ${guild.name}.`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
        }
    });

    process.on('unhandledRejection', error => {
        console.error('–û—Ç–∫–∞–∑ –æ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –æ–±–µ—â–∞–Ω–∏—èn:', error);
    });

    process.on('uncaughtException', error => {
        console.error('–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
        // –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    });

    client.on('interactionCreate', async (interaction) => {
        if (!interaction.isCommand()) return;

        const { commandName } = interaction;

        if (!client.commands.has(commandName)) return;

        try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
            await client.commands.get(commandName).execute(interaction, client.distube);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã ${commandName}:`, error);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ DisTube
            if (error.message.includes('DisTube')) {
                try {
                    await interaction.reply({
                        content: '–û—à–∏–±–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç—É –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.',
                        ephemeral: true,
                    });
                } catch (replyError) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ DisTube:', replyError);
                }
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –ø—Ä–∞–≤
            else if (error.message.includes('MissingPermissions')) {
                try {
                    await interaction.reply({
                        content: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.',
                        ephemeral: true,
                    });
                } catch (replyError) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∞–≤:', replyError);
                }
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            else {
                try {
                    await interaction.reply({
                        content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.',
                        ephemeral: true,
                    });
                } catch (replyError) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—â–µ–π –æ—à–∏–±–∫–µ:', replyError);
                }
            }
        }
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≤–µ–Ω—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ events
    const loadEvents = (client) => {
        const eventsPath = path.join(__dirname, 'events');

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —á–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ events –∏ –µ—ë –ø–æ–¥–ø–∞–ø–æ–∫
        const loadFilesRecursively = (dir) => {
            fs.readdirSync(dir).forEach(file => {
                const filePath = path.join(dir, file);
                if (fs.statSync(filePath).isDirectory()) {
                    loadFilesRecursively(filePath); // –ï—Å–ª–∏ —ç—Ç–æ –ø–∞–ø–∫–∞, –∏–¥–µ–º –≤–Ω—É—Ç—Ä—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
                } else if (file.endsWith('.js')) {
                    const event = require(filePath);
                    if (typeof event === 'function') {
                        event(client);  // –ï—Å–ª–∏ —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º –µ—ë —Å –ø–µ—Ä–µ–¥–∞—á–µ–π client
                    }
                }
            });
        };

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ events
        loadFilesRecursively(eventsPath);
    };
    loadEvents(client);

    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±–æ—Ç–∞
    client.login(token);
});