const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { money, rank, economy_settings } = require('../../mongoDB'); // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å levels –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
const { embedcolor } = require('../../config.json');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('leaderboard')
        .setDescription('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –º–æ–Ω–µ—Ç–∞–º –∏–ª–∏ —É—Ä–æ–≤–Ω—è–º')
        .addStringOption(option =>
            option.setName('—Ç–∏–ø')
                .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–∞–±–ª–∏—Ü—ã: –ø–æ –º–æ–Ω–µ—Ç–∞–º –∏–ª–∏ —É—Ä–æ–≤–Ω—è–º')
                .setRequired(true)
                .addChoices(
                    { name: '–ú–æ–Ω–µ—Ç—ã', value: 'coins' },
                    { name: '–£—Ä–æ–≤–Ω–∏', value: 'levels' }
                )
        ),

    async execute(interaction) {
        const guild = interaction.guild;
        const serverAvatarURL = guild.iconURL({ dynamic: true }) || '';
        const choice = interaction.options.getString('—Ç–∏–ø');

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ –±–æ—Ç–æ–≤)
        const members = await guild.members.fetch();
        const humanMembers = members.filter(member => !member.user.bot);

        if (choice === 'coins') {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const moneyData = await money.find({ guildID: guild.id, userID: { $in: humanMembers.map(m => m.user.id) } });

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å 0 —Ç–µ–º, –∫—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const fullMoneyData = humanMembers.map(member => {
                const userData = moneyData.find(m => m.userID === member.id);
                return {
                    userID: member.id,
                    username: member.user.username,
                    handBalance: userData ? userData.handBalance : 0 // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –±–∞–ª–∞–Ω—Å = 0
                };
            });

            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç
            fullMoneyData.sort((a, b) => b.handBalance - a.handBalance);

            if (fullMoneyData.length === 0) {
                return interaction.reply({ content: '–¢–∞–±–ª–∏—Ü–∞ —Å –ª–∏–¥–µ—Ä–∞–º–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', ephemeral: true });
            }

            const currencySymbolData = await economy_settings.findOne({ guildID: guild.id });
            const currencySymbol = currencySymbolData ? currencySymbolData.currencySymbol || 'üíµ' : 'üíµ';

            const itemsPerPage = 15;
            const totalPages = Math.ceil(fullMoneyData.length / itemsPerPage);
            let currentPage = 0;

            const generateEmbed = (page) => {
                const start = page * itemsPerPage;
                const end = start + itemsPerPage;
                const leaderboard = fullMoneyData.slice(start, end).map((m, i) => {
                    const rankIndex = start + i + 1;

                    let placeIcon = '';
                    if (rankIndex === 1) placeIcon = 'üí∞';
                    else if (rankIndex === 2) placeIcon = 'ü•à';
                    else if (rankIndex === 3) placeIcon = 'ü•â';

                    return `${placeIcon} #${rankIndex} **${m.username}**\n–ë–∞–ª–∞–Ω—Å: ${m.handBalance} ${currencySymbol}`;
                }).join('\n\n'); // –û—Ç–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è

                const embed = new EmbedBuilder()
                    .setTitle(`–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${guild.name}`)
                    .setThumbnail(serverAvatarURL)
                    .setDescription(leaderboard || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
                    .setFooter({ text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages} - —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${humanMembers.size}` })
                    .setColor(embedcolor);

                return embed;
            };

            const generateButtons = (page) => {
                return new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('first')
                            .setEmoji('‚èÆÔ∏è')
                            .setStyle(ButtonStyle.Primary)
                            .setDisabled(page === 0),
                        new ButtonBuilder()
                            .setCustomId('previous')
                            .setEmoji('‚¨ÖÔ∏è')
                            .setStyle(ButtonStyle.Primary)
                            .setDisabled(page === 0),
                        new ButtonBuilder()
                            .setCustomId('next')
                            .setEmoji('‚û°Ô∏è')
                            .setStyle(ButtonStyle.Primary)
                            .setDisabled(page === totalPages - 1),
                        new ButtonBuilder()
                            .setCustomId('last')
                            .setEmoji('‚è≠Ô∏è')
                            .setStyle(ButtonStyle.Primary)
                            .setDisabled(page === totalPages - 1)
                    );
            };

            const embedMessage = await interaction.reply({ embeds: [generateEmbed(currentPage)], components: [generateButtons(currentPage)], fetchReply: true });

            const collector = embedMessage.createMessageComponentCollector({ time: 60000 });

            collector.on('collect', async i => {
                if (i.customId === 'first') {
                    currentPage = 0;
                } else if (i.customId === 'previous') {
                    currentPage = Math.max(currentPage - 1, 0);
                } else if (i.customId === 'next') {
                    currentPage = Math.min(currentPage + 1, totalPages - 1);
                } else if (i.customId === 'last') {
                    currentPage = totalPages - 1;
                }

                await i.update({ embeds: [generateEmbed(currentPage)], components: [generateButtons(currentPage)] });
            });

            collector.on('end', () => {
                embedMessage.edit({ components: [] });
            });
        } else if (choice === 'levels') {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–≤–Ω—è—Ö –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const levelData = await rank.find({ guildId: guild.id, userId: { $in: humanMembers.map(m => m.user.id) } });

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å 0 —Ç–µ–º, –∫—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const fullLevelData = humanMembers.map(member => {
                const userData = levelData.find(m => m.userId === member.id);
                return {
                    userID: member.id,
                    username: member.user.username,
                    level: userData ? userData.level : 0 // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —É—Ä–æ–≤–µ–Ω—å = 0
                };
            });

            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é
            fullLevelData.sort((a, b) => b.level - a.level);

            if (fullLevelData.length === 0) {
                return interaction.reply({ content: '–¢–∞–±–ª–∏—Ü–∞ —Å –ª–∏–¥–µ—Ä–∞–º–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', ephemeral: true });
            }

            const itemsPerPage = 15;
            const totalPages = Math.ceil(fullLevelData.length / itemsPerPage);
            let currentPage = 0;

            const generateEmbed = (page) => {
                const start = page * itemsPerPage;
                const end = start + itemsPerPage;
                const leaderboard = fullLevelData.slice(start, end).map((m, i) => {
                    const rankIndex = start + i + 1;

                    let placeIcon = '';
                    if (rankIndex === 1) placeIcon = 'üèÜ';
                    else if (rankIndex === 2) placeIcon = 'ü•à';
                    else if (rankIndex === 3) placeIcon = 'ü•â';

                    return `${placeIcon} #${rankIndex} **${m.username}**\n–£—Ä–æ–≤–µ–Ω—å: ${m.level}`;
                }).join('\n\n'); // –û—Ç–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è

                const embed = new EmbedBuilder()
                    .setTitle(`–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${guild.name}`)
                    .setThumbnail(serverAvatarURL)
                    .setDescription(leaderboard || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
                    .setFooter({ text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages} - —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${humanMembers.size}` })
                    .setColor(embedcolor);

                return embed;
            };

            const generateButtons = (page) => {
                return new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('first')
                            .setEmoji('‚èÆÔ∏è')
                            .setStyle(ButtonStyle.Primary)
                            .setDisabled(page === 0),
                        new ButtonBuilder()
                            .setCustomId('previous')
                            .setEmoji('‚¨ÖÔ∏è')
                            .setStyle(ButtonStyle.Primary)
                            .setDisabled(page === 0),
                        new ButtonBuilder()
                            .setCustomId('next')
                            .setEmoji('‚û°Ô∏è')
                            .setStyle(ButtonStyle.Primary)
                            .setDisabled(page === totalPages - 1),
                        new ButtonBuilder()
                            .setCustomId('last')
                            .setEmoji('‚è≠Ô∏è')
                            .setStyle(ButtonStyle.Primary)
                            .setDisabled(page === totalPages - 1)
                    );
            };

            const embedMessage = await interaction.reply({ embeds: [generateEmbed(currentPage)], components: [generateButtons(currentPage)], fetchReply: true });

            const collector = embedMessage.createMessageComponentCollector({ time: 60000 });

            collector.on('collect', async i => {
                if (i.customId === 'first') {
                    currentPage = 0;
                } else if (i.customId === 'previous') {
                    currentPage = Math.max(currentPage - 1, 0);
                } else if (i.customId === 'next') {
                    currentPage = Math.min(currentPage + 1, totalPages - 1);
                } else if (i.customId === 'last') {
                    currentPage = totalPages - 1;
                }

                await i.update({ embeds: [generateEmbed(currentPage)], components: [generateButtons(currentPage)] });
            });

            collector.on('end', () => {
                embedMessage.edit({ components: [] });
            });
        }
    }
};
