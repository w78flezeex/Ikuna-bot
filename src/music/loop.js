const { SlashCommandBuilder } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('loop')
    .setDescription('–ó–∞—Ü—ã–∫–ª–∏–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏')
    .addStringOption(option =>
      option.setName('—Ä–µ–∂–∏–º')
        .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞—Ü—ã–∫–ª–∏–≤–∞–Ω–∏—è')
        .setRequired(true)
        .addChoices(
          { name: '–û—á–µ—Ä–µ–¥—å', value: 'queue' },
          { name: '–¢–µ–∫—É—â–∞—è –ø–µ—Å–Ω—è', value: 'song' },
          { name: '–í—ã–∫–ª—é—á–∏—Ç—å', value: 'off' }
        )
    ),

  async execute(interaction, distube) {
    const mode = interaction.options.getString('—Ä–µ–∂–∏–º');
    const queue = distube.getQueue(interaction.guild.id);
    const voiceChannel = interaction.member.voice.channel;
    const botVoiceChannel = interaction.guild.members.me.voice.channel;
    // Check if the bot is already in another voice channel
    if (botVoiceChannel && botVoiceChannel.id !== voiceChannel.id) {
      return interaction.reply({
        content: `${interaction.user}, —è —É–∂–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—é –ø–µ—Å–Ω—é –≤ –¥—Ä—É–≥–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º! <#${botVoiceChannel.id}>`,
        ephemeral: true
      });
    }
    
    if (!voiceChannel) {
      return interaction.reply({ content: `${interaction.user}, –°–Ω–∞—á–∞–ª–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!`, ephemeral: true });
    }

    if (!queue) {
      return interaction.reply({ content: '–°–µ–π—á–∞—Å –º—É–∑—ã–∫–∞ –Ω–µ –∏–≥—Ä–∞–µ—Ç.', ephemeral: true });
    }

    let loopMode;
    switch (mode) {
      case 'queue':
        loopMode = 2; // Loop the entire queue
        break;
      case 'song':
        loopMode = 1; // Loop the current song
        break;
      case 'off':
        loopMode = 0; // Turn off loop
        break;
      default:
        loopMode = 0; // Fallback to turning off loop
    }

    queue.setRepeatMode(loopMode);

    const modeText = loopMode === 2 ? 'üîÄ –û—á–µ—Ä–µ–¥—å' : loopMode === 1 ? '‚è∏ –¢–µ–∫—É—â–∞—è –ø–µ—Å–Ω—è' : '‚è∏ –í—ã–∫–ª—é—á–µ–Ω–æ';
    return interaction.reply({ content: `–†–µ–∂–∏–º –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: **${modeText}**.` });
  },
};
