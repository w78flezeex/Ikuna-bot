const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const { autoModeration } = require('../../mongoDB');
const { embedcolor } = require('../../config.json');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('automod')
    .setDescription('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—é')
    .setDefaultMemberPermissions(0x0000000000000008n), // ADMINISTRATOR permission in BigInt
  async execute(interaction) {
    const isAdmin = interaction.member.permissions.has('ADMINISTRATOR');

    if (!isAdmin) {
      return interaction.reply('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—é –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.');
    }

    try {
      let existingData = await autoModeration.findOne({ guildID: interaction.guild.id });

      if (!existingData) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        existingData = await autoModeration.create({
          guildID: interaction.guild.id,
          banlinks: '.ru', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, —á—Ç–æ–±—ã –±—ã–ª–æ —á—Ç–æ-—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          whitelistChannels: [],
          mentionsStatus: 'off',
          badWordsStatus: 'off',
          linksStatus: 'off',
          banwords: '',
          automodStatus: 'off',
          whitelistChannelsStatus: 'off',
          whitelistusers: 'off',
          whitelistuserslist: [] // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        });
      }

      // –°–æ–∑–¥–∞–µ–º embed —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      const embed = new EmbedBuilder()
        .setColor(embedcolor)
        .setTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏')
        .setDescription(`
          üì¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã: ${existingData.linksStatus === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
          üì¢ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã: ${existingData.banlinks}
          üò∂ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤: ${existingData.badWordsStatus === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
          üò∂ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: ${existingData.banwords}
          üîä –£–ø–æ–º–∏–Ω–∞–Ω–∏—è (everyone, here): ${existingData.mentionsStatus === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
          üîí –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è: ${existingData.automodStatus === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
          üìã –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: ${existingData.whitelistChannelsStatus === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
          üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: ${existingData.whitelistChannels.join(', ') || '–ø—É—Å—Ç–æ'}
          üë§ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${existingData.whitelistusers === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
          üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞: ${existingData.whitelistuserslist.join(', ') || '–ø—É—Å—Ç–æ'}
        `);

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
      const row = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId('toggle_linksStatus')
            .setLabel(existingData.linksStatus === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
            .setStyle(existingData.linksStatus === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
            .setEmoji('üì¢'),
          new ButtonBuilder()
            .setCustomId('configure_links')
            .setLabel('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('üì¢'),
          new ButtonBuilder()
            .setCustomId('toggle_badWordsStatus')
            .setLabel(existingData.badWordsStatus === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
            .setStyle(existingData.badWordsStatus === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
            .setEmoji('üò∂'),
          new ButtonBuilder()
            .setCustomId('configure_badWords')
            .setLabel('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('üò∂'),
          new ButtonBuilder()
            .setCustomId('toggle_mentionsStatus')
            .setLabel(existingData.mentionsStatus === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
            .setStyle(existingData.mentionsStatus === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
            .setEmoji('üîä')
        );

      const row2 = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId('toggle_automodStatus')
            .setLabel(existingData.automodStatus === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
            .setStyle(existingData.automodStatus === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
            .setEmoji('üîí'),
          new ButtonBuilder()
            .setCustomId('toggle_whitelistChannelsStatus')
            .setLabel(existingData.whitelistChannelsStatus === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
            .setStyle(existingData.whitelistChannelsStatus === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
            .setEmoji('üìã'),
          new ButtonBuilder()
            .setCustomId('configure_whitelistChannels')
            .setLabel('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('üìã'),
          new ButtonBuilder()
            .setCustomId('toggle_whitelistUsers')
            .setLabel(existingData.whitelistusers === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
            .setStyle(existingData.whitelistusers === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
            .setEmoji('üë§'),
          new ButtonBuilder()
            .setCustomId('configure_whitelistUsers')
            .setLabel('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('üë§')
        );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å embed –∏ –∫–Ω–æ–ø–∫–∞–º–∏
      await interaction.reply({ embeds: [embed], components: [row, row2] });

      const filter = i => i.customId.startsWith('toggle') && i.user.id === interaction.user.id;
      const collector = interaction.channel.createMessageComponentCollector({ filter, time: 60000 });

      collector.on('collect', async i => {
        if (!i.member.permissions.has('ADMINISTRATOR')) {
          return i.reply({ content: '–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.', ephemeral: true });
        }

        if (i.customId === 'toggle_linksStatus') {
          existingData.linksStatus = existingData.linksStatus === 'on' ? 'off' : 'on';
        } else if (i.customId === 'toggle_badWordsStatus') {
          existingData.badWordsStatus = existingData.badWordsStatus === 'on' ? 'off' : 'on';
        } else if (i.customId === 'toggle_mentionsStatus') {
          existingData.mentionsStatus = existingData.mentionsStatus === 'on' ? 'off' : 'on';
        } else if (i.customId === 'toggle_automodStatus') {
          existingData.automodStatus = existingData.automodStatus === 'on' ? 'off' : 'on';
        } else if (i.customId === 'toggle_whitelistChannelsStatus') {
          existingData.whitelistChannelsStatus = existingData.whitelistChannelsStatus === 'on' ? 'off' : 'on';
        } else if (i.customId === 'toggle_whitelistUsers') {
          existingData.whitelistusers = existingData.whitelistusers === 'on' ? 'off' : 'on';
        }

        await existingData.save();

        const updatedEmbed = new EmbedBuilder()
          .setColor(embedcolor)
          .setTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏')
          .setDescription(`
            üì¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã: ${existingData.linksStatus === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
            üì¢ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã: ${existingData.banlinks}
            üò∂ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤: ${existingData.badWordsStatus === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
            üò∂ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: ${existingData.banwords}
            üîä –£–ø–æ–º–∏–Ω–∞–Ω–∏—è (everyone, here): ${existingData.mentionsStatus === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
            üîí –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è: ${existingData.automodStatus === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
            üìã –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: ${existingData.whitelistChannelsStatus === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
            üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: ${existingData.whitelistChannels.join(', ') || '–ø—É—Å—Ç–æ'}
            üë§ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${existingData.whitelistusers === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
            üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${existingData.whitelistuserslist.join(', ') || '–ø—É—Å—Ç–æ'}
          `);

        const updatedRow = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId('toggle_linksStatus')
              .setLabel(existingData.linksStatus === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
              .setStyle(existingData.linksStatus === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
              .setEmoji('üì¢'),
            new ButtonBuilder()
              .setCustomId('configure_links')
              .setLabel('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å')
              .setStyle(ButtonStyle.Primary)
              .setEmoji('üì¢'),
            new ButtonBuilder()
              .setCustomId('toggle_badWordsStatus')
              .setLabel(existingData.badWordsStatus === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
              .setStyle(existingData.badWordsStatus === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
              .setEmoji('üò∂'),
            new ButtonBuilder()
              .setCustomId('configure_badWords')
              .setLabel('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å')
              .setStyle(ButtonStyle.Primary)
              .setEmoji('üò∂'),
            new ButtonBuilder()
              .setCustomId('toggle_mentionsStatus')
              .setLabel(existingData.mentionsStatus === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
              .setStyle(existingData.mentionsStatus === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
              .setEmoji('üîä')
          );

        const updatedRow2 = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId('toggle_automodStatus')
              .setLabel(existingData.automodStatus === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
              .setStyle(existingData.automodStatus === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
              .setEmoji('üîí'),
            new ButtonBuilder()
              .setCustomId('toggle_whitelistChannelsStatus')
              .setLabel(existingData.whitelistChannelsStatus === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
              .setStyle(existingData.whitelistChannelsStatus === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
              .setEmoji('üìã'),
            new ButtonBuilder()
              .setCustomId('configure_whitelistChannels')
              .setLabel('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å')
              .setStyle(ButtonStyle.Primary)
              .setEmoji('üìã'),
            new ButtonBuilder()
              .setCustomId('toggle_whitelistUsers')
              .setLabel(existingData.whitelistusers === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
              .setStyle(existingData.whitelistusers === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
              .setEmoji('üë§'),
            new ButtonBuilder()
              .setCustomId('configure_whitelistUsers')
              .setLabel('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å')
              .setStyle(ButtonStyle.Primary)
              .setEmoji('üë§')
          );

          await i.update({ embeds: [updatedEmbed], components: [updatedRow, updatedRow2] });
        });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –≤—ã–ø–∞–¥–∞—é—â–∏–µ –º–µ–Ω—é
      const configureFilter = i => i.customId.startsWith('configure') && i.user.id === interaction.user.id;
      const configureCollector = interaction.channel.createMessageComponentCollector({ configureFilter, time: 60000 });

      configureCollector.on('collect', async i => {
        if (!i.member.permissions.has('ADMINISTRATOR')) {
          return i.reply({ content: '–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.', ephemeral: true });
        }

        if (i.customId === 'configure_links') {
          const modal = new ModalBuilder()
            .setCustomId('configure_links_modal')
            .setTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤');

          const input = new TextInputBuilder()
            .setCustomId('banlinks')
            .setLabel('–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã')
            .setStyle(TextInputStyle.Paragraph)
            .setValue(existingData.banlinks)
            .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.');

          const actionRow = new ActionRowBuilder().addComponents(input);
          modal.addComponents(actionRow);

          await i.showModal(modal);
        }

        if (i.customId === 'configure_badWords') {
          const modal = new ModalBuilder()
            .setCustomId('configure_badWords_modal')
            .setTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤');

          const input = new TextInputBuilder()
            .setCustomId('banwords')
            .setLabel('–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞')
            .setStyle(TextInputStyle.Paragraph)
            .setValue(existingData.banwords || '')
            .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.');

          const actionRow = new ActionRowBuilder().addComponents(input);
          modal.addComponents(actionRow);

          await i.showModal(modal);
        }

        if (i.customId === 'configure_whitelistChannels') {
          const modal = new ModalBuilder()
            .setCustomId('configure_whitelistChannels_modal')
            .setTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ / –∫–∞—Ç–µ–≥–æ—Ä–∏–π');

          const input = new TextInputBuilder()
            .setCustomId('whitelistChannels')
            .setLabel('–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã / –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            .setStyle(TextInputStyle.Paragraph)
            .setValue(existingData.whitelistChannels.join(', '))
            .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ ID —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ / –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.');

          const actionRow = new ActionRowBuilder().addComponents(input);
          modal.addComponents(actionRow);

          await i.showModal(modal);
        }

        if (i.customId === 'configure_whitelistUsers') {
          const modal = new ModalBuilder()
            .setCustomId('configure_whitelistUsers_modal')
            .setTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞');

          const input = new TextInputBuilder()
            .setCustomId('whitelistUsers')
            .setLabel('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
            .setStyle(TextInputStyle.Paragraph)
            .setValue(existingData.whitelistuserslist.join(', '))
            .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.');

          const actionRow = new ActionRowBuilder().addComponents(input);
          modal.addComponents(actionRow);

          await i.showModal(modal);
        }
      });

      interaction.client.on('interactionCreate', async interaction => {
        if (!interaction.isModalSubmit()) return;
    
        const { customId } = interaction;
    
        try {
            if (customId === 'configure_links_modal') {
                const banlinks = interaction.fields.getTextInputValue('banlinks');
                existingData.banlinks = banlinks;
            }
    
            if (customId === 'configure_badWords_modal') {
                const banwords = interaction.fields.getTextInputValue('banwords');
                existingData.banwords = banwords;
            }
    
            if (customId === 'configure_whitelistChannels_modal') {
                const whitelistChannels = interaction.fields.getTextInputValue('whitelistChannels')
                    .split(',')
                    .map(id => id.trim())
                    .filter(id => interaction.guild.channels.cache.has(id)); // Check channel existence
                existingData.whitelistChannels = whitelistChannels;
            }
    
            if (customId === 'configure_whitelistUsers_modal') {
                const whitelistUsers = interaction.fields.getTextInputValue('whitelistUsers')
                    .split(',')
                    .map(id => id.trim())
                    .filter(id => interaction.guild.members.cache.has(id)); // Check user existence
                existingData.whitelistuserslist = whitelistUsers;
            }
    
            await existingData.save();
    
            // Send acknowledgment response if the interaction was a modal
            await interaction.reply({ content: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', ephemeral: true });
    
            // Create the updated embed
            const updatedEmbed = new EmbedBuilder()
                .setColor(embedcolor)
                .setTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏')
                .setDescription(`
                    üì¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã: ${existingData.linksStatus === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
                    üì¢ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã: ${existingData.banlinks}
                    üò∂ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤: ${existingData.badWordsStatus === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
                    üò∂ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: ${existingData.banwords}
                    üîä –£–ø–æ–º–∏–Ω–∞–Ω–∏—è (everyone, here): ${existingData.mentionsStatus === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
                    üîí –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è: ${existingData.automodStatus === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
                    üìã –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: ${existingData.whitelistChannelsStatus === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
                    üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: ${existingData.whitelistChannels.join(', ') || '–ø—É—Å—Ç–æ'}
                    üë§ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${existingData.whitelistusers === 'on' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
                    üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞: ${existingData.whitelistuserslist.join(', ') || '–ø—É—Å—Ç–æ'}
                `);
    
            // Create updated buttons
            const row1 = new ActionRowBuilder()
            .addComponents(
              new ButtonBuilder()
                .setCustomId('toggle_linksStatus')
                .setLabel(existingData.linksStatus === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
                .setStyle(existingData.linksStatus === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
                .setEmoji('üì¢'),
              new ButtonBuilder()
                .setCustomId('configure_links')
                .setLabel('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å')
                .setStyle(ButtonStyle.Primary)
                .setEmoji('üì¢'),
              new ButtonBuilder()
                .setCustomId('toggle_badWordsStatus')
                .setLabel(existingData.badWordsStatus === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
                .setStyle(existingData.badWordsStatus === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
                .setEmoji('üò∂'),
              new ButtonBuilder()
                .setCustomId('configure_badWords')
                .setLabel('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å')
                .setStyle(ButtonStyle.Primary)
                .setEmoji('üò∂'),
              new ButtonBuilder()
                .setCustomId('toggle_mentionsStatus')
                .setLabel(existingData.mentionsStatus === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
                .setStyle(existingData.mentionsStatus === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
                .setEmoji('üîä')
            );

            const row2 = new ActionRowBuilder()
            .addComponents(
              new ButtonBuilder()
                .setCustomId('toggle_automodStatus')
                .setLabel(existingData.automodStatus === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
                .setStyle(existingData.automodStatus === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
                .setEmoji('üîí'),
              new ButtonBuilder()
                .setCustomId('toggle_whitelistChannelsStatus')
                .setLabel(existingData.whitelistChannelsStatus === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
                .setStyle(existingData.whitelistChannelsStatus === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
                .setEmoji('üìã'),
              new ButtonBuilder()
                .setCustomId('configure_whitelistChannels')
                .setLabel('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å')
                .setStyle(ButtonStyle.Primary)
                .setEmoji('üìã'),
              new ButtonBuilder()
                .setCustomId('toggle_whitelistUsers')
                .setLabel(existingData.whitelistusers === 'on' ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å')
                .setStyle(existingData.whitelistusers === 'on' ? ButtonStyle.Danger : ButtonStyle.Success)
                .setEmoji('üë§'),
              new ButtonBuilder()
                .setCustomId('configure_whitelistUsers')
                .setLabel('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å')
                .setStyle(ButtonStyle.Primary)
                .setEmoji('üë§')
        );

        // Send the updated embed and button row
        await interaction.channel.send({ embeds: [updatedEmbed], components: [row1, row2] });

    } catch (error) {
        console.error(error);
        await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.', ephemeral: true });
    }
});
} catch (error) {
console.error(error);
return interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.', ephemeral: true });
}
}
}  